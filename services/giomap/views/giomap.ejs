
<html>
<head>
    <title>Shared Map</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css">
    
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"  type="text/javascript"></script>
    <!-- <script src="/giomap/socket.io/socket.io.js"></script> -->
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <!-- <script src="https://unpkg.com/osmtogeojson@2.2.12/osmtogeojson.js"></script> -->
    <link rel="stylesheet" href="https://unpkg.com/sakura.css/css/sakura-vader.css" media="screen" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-draw/dist/leaflet.draw.css" />
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <!-- include alpine.js -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
    <script type="text/javascript" src="../js/leafletgraticule.js"></script>
    
    <!-- giomap JS script -->
    <script src="../js/geoutils.js"></script>
    <script src="../js/mapDrawIO.js"></script>
    <script src="../js/components/TypologySelector.js"></script>

    <!-- giomap leaflet map -->
    <script src="../js/giomap.js"></script>
    
    <!-- color picker -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/mdbassit/Coloris@latest/dist/coloris.min.css"/>
    <script src="https://cdn.jsdelivr.net/gh/mdbassit/Coloris@latest/dist/coloris.min.js"></script>
    
    
    <!-- <div id="cover" style="background-color:aquamarine;position:fixed;width:100%;height:100%;z-index:3000;left:0;top:0"></div> -->
    <!-- <button id="gotome" style="position:fixed;left:50%;top:50%;z-index:3001;" onclick="goToUser()">Go to me!</button> -->
    <!-- post data div -->
</head>
<body>
    
    <%- include('./navigation', {page:"giomap"}) %>         
    <div id="map"></div>
    <div id="typologyActionControl"></div>
    <div id="hostPanel"></div>
    <%- include('./alert') %>
    
</body>
</html>



<script>
    
    // get map id from url
    var url = window.location.href;
    var mapCanvasID = url.substring(url.lastIndexOf('/') + 1);
    
    giomap = new Giomap(mapCanvasID)
    giomap.init().then((giomap)=>{

        // show pop up with map name and description
        show_prompt(giomap.metadata.name, giomap.metadata.description, false, 'OK');
        addTypologyActionButtons(giomap.typologies);
        // add workshop host panel if user is host
        hostPanelContainer = document.getElementById('hostPanel');
        workshopHostPanel(giomap, hostPanelContainer);
    });
               

            
            function addTypologyActionButtons(typologies){
                // for each typology, create a button that initates drawing of that typology.
                // uses typology.geometryType to set drawing mode
                // uses typology.name to set button text
                
                // if no typologies
                if(!typologies || typologies.length == 0){
                    return;
                }
                // get container for buttons
                var container = document.getElementById('typologyActionControl');
                // clear container
                container.innerHTML = "";
                
                
                // for each typology
                
                
                typologies.forEach(function(typology){
                    // create button
                    var button = document.createElement('button');
                    // set button text to typology name
                    button.innerHTML = 'draw <b>' + typology.name +"</b>";
                    button.style.margin = "5px";
                    // button shadow
                    button.style.boxShadow = "0px 0px 5px 0px rgba(0,0,0,0.75)";
                    // fully round sides
                    button.style.borderRadius = "20px";
                    // add event listener to button
                    button.addEventListener('click', function(e){
                        // prevent default action
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        initiateTypologyDrawing(typology, giomap);
                        
                    });
                    // add button to container
                    container.appendChild(button);
                });
                
                
            }
            
            
            function initiateTypologyDrawing(typology, giomap){
                
                // get typology geometry type in leafler draw format
                var drawSettings = {
                    'Point': giomap.io.controls[0].options.draw["circlemarker"],
                    "Line": giomap.io.controls[0].options.draw["polyline"],
                    "Polygon": giomap.io.controls[0].options.draw["polygon"]
                }
                
                var drawConstructors = {
                    'Point': L.Draw.CircleMarker,
                    "Line": L.Draw.Polyline,
                    "Polygon": L.Draw.Polygon
                }
                
                new drawConstructors[typology.geometryType](giomap.map, drawSettings[typology.geometryType]).enable();
                
                // when user finishes drawing, log to console. Then remove the event listener,
                // without removing other event listeners
                
                setTypology = function(e){
                    // add typology to layer
                    e.layer.feature.properties.typology = typology;
                    giomap.map.off('draw:created', setTypology);
                    // safe feature to server now that typology is set
                    giomap.io.setLayerForEveryone(e.layer);
                }
                // add this listener
                giomap.map.on('draw:created', setTypology);
                
                // when user aborts drawing in any way, remove event listeners
                
                giomap.map.on('draw:drawstop', function(e){
                    giomap.map.off('draw:created', setTypology);
                    giomap.map.off('draw:drawstop', arguments.callee);
                });
                
                
                
            }
            
            
            
            function openGeoJsonFileDialog(){
                
                // create input element
                var input = document.createElement('input');
                // set input type to file
                input.type = 'file';
                // set input accept to geojson
                input.accept = '.geojson';
                // add event listener to input
                input.addEventListener('change', function(e){
                    // prevent default action
                    e.preventDefault();
                    e.stopImmediatePropagation()
                    // get file
                    var file = e.target.files[0];
                    // create file reader
                    var reader = new FileReader();
                    // add event listener to reader
                    reader.addEventListener('load', function(e){
                        // prevent default action
                        e.preventDefault();
                        e.stopImmediatePropagation();
                        // get file contents
                        var contents = e.target.result;
                        // parse contents as json
                        var geojson = JSON.parse(contents);
                        // create layers from geojson features and add them to the editing layer
                        // not included in mapio, so doing it manually here
                        geojson.features.forEach(function(feature){
                            // add uuid to feature
                            feature.properties.uuid = crypto.randomUUID();
                            
                            feature.properties.color = giomap.io.user.color;
                            
                            
                            // send to server 
                            giomap.io.socket.emit('iUploadedGeometriesFromFile!',
                            {layer: feature, mapcanvasShareLinkId: giomap.io.mapCanvasShareLinkId}
                            );
                        });
                        
                        // add layers to map
                        
                        // close alert
                        close_prompt();
                        // new prompt: all went well
                        show_prompt('Success!', 'GeoJSON file uploaded successfully.',false, "OK");
                    });
                    // read file as text
                    reader.readAsText(file);
                });
                // display input
                
                input.click();
            } 
            
            
            class BringEveryoneHereButton {
                constructor(mapio, buttonParent){
                    this.mapio = mapio;
                    this.button = document.createElement('button');
                    buttonParent.appendChild(this.button);
                    this.button.style.boxShadow = "0px 0px 5px 0px rgba(0,0,0,0.75)";
                    this.button.style.borderRadius = "20px";
                    this.button.style.backgroundColor = "cyan";
                    this.button.style.margin = "5px";
                    this.button.innerHTML = 'Set this view for everyone';
                    this.button.onclick = this.mapio.bringEveryoneToMyView.bind(this.mapio);
                }




            }

            class HighlightForEveryoneButton {
                constructor(mapio, buttonParent){
                    this.mapio = mapio;
                    this.createButton();
                    buttonParent.appendChild(this.button);
                }

                createButton(){
                    this.button = document.createElement('button');
                    this.button.innerHTML = 'Discuss Datapoint';
                    this.button.style.margin = "5px";
                    this.button.style.boxShadow = "0px 0px 5px 0px rgba(0,0,0,0.75)";
                    this.button.style.borderRadius = "20px";
                    this.button.style.backgroundColor = "cyan";

                    this.buttonDefaultStyle();
                    this.button.addEventListener('click', ()=>{
                        this.startSelectingLayerToHighlight();
                    });
                }

                buttonDefaultStyle(){
                    this.button.innerHTML = 'Discuss Datapoint';
                    this.button.style.backgroundColor = "light blue";
                    if(this.button.querySelector('div')){
                        this.button.querySelector('div').remove();
                    }
                }

                buttonStyleWhilePickingLayerToHighlight(){ 
                    this.button.innerHTML = 'click on data point to discuss!';
                    this.button.style.backgroundColor = "orange";
                    // add round div with 'x' to cancel highlighting to button content
                    var cancelHighlightButton = document.createElement('div');
                    cancelHighlightButton.innerHTML = 'x';
                    cancelHighlightButton.style.borderRadius = "20px";
                    cancelHighlightButton.style.backgroundColor = "red";
                    cancelHighlightButton.style.color = "white";
                    cancelHighlightButton.style.width = "20px";
                    cancelHighlightButton.style.height = "20px";
                    cancelHighlightButton.style.display = "flex";
                    cancelHighlightButton.style.alignItems = "center";
                    cancelHighlightButton.style.justifyContent = "center";
                    cancelHighlightButton.style.position = "relative";
                    cancelHighlightButton.style.right = "5px";
                    cancelHighlightButton.style.top = "5px";
                    cancelHighlightButton.style.cursor = "pointer";
                    cancelHighlightButton.style.display = "inline";
                    // this.button.appendChild(cancelHighlightButton);
                }

                highlightHandler (e) {
                            console.log('highlighting layer', e.target);
                            // mapio.highlightFeature(e.target);
                           this.mapio.highlightLayerForEveryone(e.target);
                            this.stopSelectingLayerToHighlight();
                        };

                startSelectingLayerToHighlight(){
                    // change button style:
                    console.log('this', this);
                    this.buttonStyleWhilePickingLayerToHighlight();

                    // don't open any popups until selected
                    this.mapio.disableEditing();

          
                    
                    this.mapio.editingLayer.eachLayer((layer)=>{
                        layer.on('click', this.highlightHandler.bind(this));
                        console.log('event listeners', layer._events);
                    });

                    // stop selecting layer to highlight when user clicks anywhere on map that is not a layer
                    this.mapio.map.on('click', this.stopSelectingLayerToHighlight.bind(this));

                }

                stopSelectingLayerToHighlight(){
                    // reset button style
                    this.buttonDefaultStyle();
                    this.mapio.editingLayer.eachLayer((layer)=>{
                        // list event listeners
                        // console.log('event listeners', layer._events);
                        layer.off('click');
                        // reinstate popup

                    });
                    this.mapio.enableEditing();

                    // remove map click event listener
                    this.mapio.map.off('click', this.stopSelectingLayerToHighlight);


                    
                   
                }

            
            }
            
            function workshopHostPanel (giomap, container){
                // is the user the map host?
                // get user
                
                return fetch('/giomap/user/me').then(response => response.json()).then(
                user => {

                    if(user.username == giomap.metadata.createdBy.username){
                        new HighlightForEveryoneButton(giomap.io, container);
                        new BringEveryoneHereButton(giomap.io, container);
                    }

                });
            }
            
            
        </script>
        
        
        <style>
            #map {
                
                width: 100vw;
                /* view height minus some */
                height: calc(100vh - 70px);
                margin-top: 70px;
                
            }
            
            body {
                margin: 0;
                padding: 0;
            }
            
            
            
            #typologyActionControl {
                /* hover above everything bottom center */
                /* space content evenly */
                /* create new crows if too full for width */
                max-width: 80%;
                
                position: fixed;
                bottom: 10px;
                left: 50%;
                transform: translateX(-50%);
                display: flex;
                flex-wrap: wrap;
                justify-content: space-evenly;
                flex-direction: row;
                flex-wrap: wrap;
                z-index: 1000;
                
                
                
            }
            /* hostpanel and child divs */
            #hostPanel {
                                    position: fixed;
                                    top: 90px;
                                    left: 50%;
                                    transform: translateX(-50%);
                                    display: flex;
                                    flex-wrap: wrap;
                                    justify-content: space-evenly;
                                    /* al */
                                    flex-direction: row;
                                    flex-wrap: wrap;
                                    z-index: 3000;
                                    max-width: 80%;
            }


            
            .leaflet-tile {
                /* // filter 50% brightness and 15 deg hu */
                filter: brightness(50%) hue-rotate(-45deg);
            }
            
            
            /*  on leaflet control disable the sakura's a:hover styling */
            .leaflet-control a:hover {
                color: inherit;
            }
            
            .leaflet-popup-content {
                min-width: 150px;
                /* everything regular sized, not smaller */
                font-size: 1.2rem;
                
                overflow-y: scroll;
            }
            p {
                display: inline;
            }
            
            .leaflet-popup-content-wrapper, .leaflet-popup-tip {
                /* regular font size (relative
                font-size: 1rem;
                min-width:100px;
                */
            }
            
            .leaflet-popup-tip-container {
                
                font-size: 1rem;
                /* min-width:100px; */
            } 
            
            /* <i> children of <a> of leaflet-control-custom */
                .leaflet-control-custom a i {
                    font-size: 2rem; */
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    color:black;
                    margin: auto;
                    padding-top:5px;
                }
                
                
                .leaflet-div-icon {
                    margin-left: -4px !important;
                    margin-top: -4px !important;
                    width: 8px !important;
                    height: 8px !important;
                }
                
            </style>