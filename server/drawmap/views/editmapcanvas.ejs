
<html>
<head>
    <title>Edit Map Details</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
    integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
    crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" crossorigin=""></script>
    
    <script src="https://code.jquery.com/jquery-3.2.1.min.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/sakura.css/css/sakura-vader.css" media="screen" />
    <link href='https://unpkg.com/boxicons@2.1.4/css/boxicons.min.css' rel='stylesheet'>
    <!-- include alpine.js -->
    <script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
    
    <!-- <div id="cover" style="background-color:aquamarine;position:fixed;width:100%;height:100%;z-index:3000;left:0;top:0"></div> -->
    <!-- <button id="gotome" style="position:fixed;left:50%;top:50%;z-index:3001;" onclick="goToUser()">Go to me!</button> -->
    <!-- post data div -->
</head>
<body>
    

    <!-- form to create a map -->
    <!-- text fields for name and descripion -->
    <!-- as well as a leaflet map that is used to define the maps initial view -->
    <div id="createMapContainer">
    <h1>Create a new Map</h1>

    <p>
        <form id="createMapForm">
            <label for="name">Name:</label><br>
            <textarea id="name" name="name" placeholder="Enter Map Name" rows="1"></textarea><br>
            <label for="description">Description:</label><br>
            <textarea id="description" name="description" placeholder="Enter description" rows="4" cols="20"></textarea><br>
            <label for="leafletMap">Initial Map View</label><br>
            <div id="leafletMap"></div>
            <div id="filler" style="height: 400px; width: 50%; float: left;"></div>
            <button type="submit" name="action" value="update">Save</button>
            <button type="submit" class='cancelbutton' name="action" value="cancel">Cancel</button>
        </form>
    </p>
</div>

    <!-- navigation -->
    <%- include('./navigation',{page:'editmapcanvas'}) %>

</body>

<style>

    /* some top padding for form container */
    #createMapContainer {
        padding-top: 50px;
    }

    .cancelbutton {
        background-color: #f44336;
        color: white;
      }

    /* style for leaflet map */
    #leafletMap {
        height: 400px;
        width: 50%;
        /* align right */
        float: right;
    }

</style>


<script>

// init leaflet map
var map = L.map('leafletMap').setView([51.505, -0.09], 13);
// add osm layer
L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
    maxZoom: 19,
    attribution: '&copy; <a href="http://www.openstreetmap.org/">OpenStreetMap</a>'
}).addTo(map);

// overwrite default form submit behaviour

document.getElementById('createMapForm').addEventListener('submit', function(event) {
    // prevent default behaviour
    event.preventDefault();
    // check which button was pressed
    const action = event.submitter.value;
    // call corresponding function
    if (action === 'update') {
        updateMap(event);
    } else if (action === 'cancel') {
        cancelMap(event);
    }
});

getMapDetails();

function getMapDetails () {
    // get map id from url
    const url = window.location.href;
    const mapId = url.substring(url.lastIndexOf('/') + 1);
    // get map details from server
    fetch('/drawmap/mapdetails/' + mapId)
    .then(res => {
        if(res.status === 200) {
            return res.json();
        } else {
            throw new Error('Could not get map details');
        }
    })
    .then(res => {
        console.log(res);
        // set map name
        document.getElementById('name').value = res.name;
        // set map description
        document.getElementById('description').value = res.description;
        // set map view
        setMapPerspective(res.leafletView);
    })
}

function updateMap (event) {
    event.preventDefault();
    // get form data
    const formData = new FormData(event.target);
    // get map name
    const name = formData.get('name');
    // get map description
    const description = formData.get('description');
    // get map view
    const mapView = getMapPerspective();
    
    console.log(name);
    // get map id from url
    url = window.location.href;
    mapId = url.substring(url.lastIndexOf('/') + 1);
    endpoint = '/drawmap/update/' + mapId;
    // send data to server
    fetch(endpoint, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({
            name: name,
            description: description,
            leafletView: mapView
        })
    }) // if status is ok, get the map id from the response
    .then(res => {
        if(res.status === 200) {
            return res.json();
        } else {
            throw new Error('Could not create map');
        }

        
    }) // redirect to map edit page
    .then(res => {
        console.log(res);
        window.location.href = '/drawmap/list/';
    })


}

function cancelMap (event) {
    event.preventDefault();
    // go to map list
    window.location.href = '/drawmap/list';
}

function getMapPerspective() {
    const center = map.getCenter();
    console.log([center.lat, center.lng]);
    return {
      center: [center.lat, center.lng],
      zoom: map.getZoom()
    };
  }

  // Function to set the map to a specific location and zoom
  function setMapPerspective(perspective) {
    map.setView(perspective.center, perspective.zoom);
  }


</script>

</html>